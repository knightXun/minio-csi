---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: csi-minioplugin
spec:
  selector:
    matchLabels:
      app: csi-minioplugin
  template:
    metadata:
      labels:
        app: csi-minioplugin
    spec:
      tolerations:
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
      serviceAccount: s3fs-csi-nodeplugin
      hostNetwork: true
      hostPID: true
      # to use e.g. Rook orchestrated cluster, and mons' FQDN is
      # resolved through k8s service, set dns policy to cluster first
      dnsPolicy: ClusterFirstWithHostNet
      containers:
        - name: driver-registrar
          imagePullPolicy: "IfNotPresent"
          image: quay.io/k8scsi/csi-node-driver-registrar:v1.0.2
          args:
            - "--v=5"
            - "--csi-address=/csi/csi.sock"
            - "--kubelet-registration-path=/var/lib/kubelet/plugins/s3fs.csi.minio.com/csi.sock"
          lifecycle:
            preStop:
              exec:
                command: [
                  "/bin/sh", "-c",
                  "rm -rf /registration/s3fs.csi.minio.com \
                  /registration/s3fs.csi.minio.com-reg.sock"
                ]
          env:
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: registration-dir
              mountPath: /registration
        - name: csi-rbdplugin
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          # for stable functionality replace canary with latest release version
          image: k8s.gcr.io/csi-s3fsplugin:v1.13.2-6979b55
          args:
            - "--nodeid=$(NODE_ID)"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--v=5"
            - "--containerized=true"
          env:
            - name: HOST_ROOTFS
              value: "/rootfs"
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet/pods
              mountPropagation: "Bidirectional"
            - name: plugin-mount-dir
              mountPath: /var/lib/kubelet/plugins/kubernetes.io/csi/volumeDevices/
              mountPropagation: "Bidirectional"
            - mountPath: /dev
              name: host-dev
            - mountPath: /rootfs
              name: host-rootfs
            - mountPath: /sys
              name: host-sys
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - name: s3fs-csi-config
              mountPath: /etc/s3fs-csi-config/
            - name: tmp
              mountPath: /tmp
            - name: etc
              mountPath: /host/etc
            - mountPath: /var/log
              name: host-log
            - name: usr
              mountPath: /host/usr/lib
      volumes:
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/s3fs.csi.minio.com
            type: DirectoryOrCreate
        - name: plugin-mount-dir
          hostPath:
            path: /var/lib/kubelet/plugins/kubernetes.io/csi/volumeDevices/
            type: DirectoryOrCreate
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: Directory
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
        - name: host-dev
          hostPath:
            path: /dev
        - name: host-rootfs
          hostPath:
            path: /
        - name: host-sys
          hostPath:
            path: /sys
        - name: tmp
          hostPath:
            path: /tmp
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: etc
          hostPath:
            path: /etc
        - name: s3fs-csi-config
          configMap:
            name: s3fs-csi-config
        - name: host-log
          hostPath:
            path: /var/log/
        - name: usr
          hostPath:
            path: /usr/lib/
---
apiVersion: v1
kind: ConfigMap
data:
  config.json: |-
    []
metadata:
  name: s3fs-csi-config
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: s3fs-csi-nodeplugin

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: s3fs-csi-nodeplugin
aggregationRule:
  clusterRoleSelectors:
    - matchLabels:
        rbac.s3fs.csi.minio.com/aggregate-to-s3fs-csi-nodeplugin: "true"
rules: []
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: s3fs-csi-nodeplugin-rules
  labels:
    rbac.s3fs.csi.minio.com/aggregate-to-s3fs-csi-nodeplugin: "true"
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "update"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: s3fs-csi-nodeplugin
subjects:
  - kind: ServiceAccount
    name: s3fs-csi-nodeplugin
    namespace: default
roleRef:
  kind: ClusterRole
  name: s3fs-csi-nodeplugin
  apiGroup: rbac.authorization.k8s.io
---

